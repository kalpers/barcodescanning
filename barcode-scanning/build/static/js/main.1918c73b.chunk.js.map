{"version":3,"sources":["Scanner.js","Result.js","index.js"],"names":["Scanner","state","results","onDetected","result","console","log","code","codeResult","setState","length","props","Fragment","id","className","this","Quagga","init","inputStream","type","constraints","width","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","locate","err","error","start","offDetected","React","Component","Result","JSON","stringify","Start","scanning","toggleScan","onClick","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qPAGqBA,E,4MACnBC,MAAQ,CACNC,QAAS,I,EAsDXC,WAAa,SAAAC,GACXC,QAAQC,IAAI,QAASF,GACrB,IAAIG,EAAOH,EAAOI,WAAWD,KAC7B,EAAKE,SAAS,CAAEP,QAAQ,GAAD,mBAAM,EAAKD,MAAMC,SAAjB,CAA0BK,MAE7C,EAAKN,MAAMC,QAAQQ,OAAS,IAC9B,EAAKC,MAAMR,WAAW,EAAKF,MAAMC,U,4CAzDrC,WACE,OACE,eAAC,IAAMU,SAAP,WACE,qBAAKC,GAAG,cAAcC,UAAU,aAChC,8BAAIC,KAAKd,MAAMC,QAAQQ,OAAvB,gB,+BAKN,WACEM,IAAOC,KACL,CACEC,YAAa,CACXC,KAAM,aACNC,YAAa,CACXC,MAAO,IACPC,OAAQ,IACRC,WAAY,gBAGhBC,QAAS,CACPC,UAAW,SACXC,YAAY,GAEdC,aAAc,EACdC,QAAS,CACPC,QAAS,CAAC,cACVC,MAAO,CACLC,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,aAAa,IAGjBC,QAAQ,IAEV,SAASC,GACP,GAAIA,EACF,OAAO/B,QAAQgC,MAAMD,GAEvB/B,QAAQC,IAAI,2CACZU,IAAOsB,WAGXtB,IAAOb,WAAWY,KAAKZ,c,kCAGzB,WACEa,IAAOuB,YAAYxB,KAAKZ,gB,GArDSqC,IAAMC,WCDtBC,E,4JACnB,WACE,IAAMtC,EAASW,KAAKJ,MAAMP,OAE1B,OAAKA,EAGE,8BAAMuC,KAAKC,UAAUxC,EAAQ,KAAM,QAFjC,S,GALuBoC,IAAMC,WCKpCI,G,kNACJ5C,MAAQ,CACN6C,UAAU,EACV5C,QAAS,M,EAkBX6C,WAAa,WACX,EAAKtC,SAAS,CAAEqC,UAAW,EAAK7C,MAAM6C,Y,EAGxC3C,WAAa,SAAAC,GACXC,QAAQC,IAAIF,GACZ,EAAKK,SAAS,CAAEL,SAAQ0C,UAAU,K,4CArBpC,WACE,OACE,gCACE,wBAAQE,QAASjC,KAAKgC,WAAtB,SACGhC,KAAKd,MAAM6C,SAAW,OAAS,aAEjC/B,KAAKd,MAAM6C,SACV,cAAC,EAAD,CAAS3C,WAAYY,KAAKZ,aAE1B,cAAC,EAAD,CAAQC,OAAQW,KAAKd,MAAMG,gB,GAfjBoC,IAAMC,YA+B1B,SAASQ,IACP,OACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,EAAD,MAKN,IAAMoC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACL,EAAD,IAASC,K","file":"static/js/main.1918c73b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Quagga from \"quagga\";\r\n\r\nexport default class Scanner extends React.Component {\r\n  state = {\r\n    results: []\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"interactive\" className=\"viewport\" />\r\n        <p>{this.state.results.length} / 10</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    Quagga.init(\r\n      {\r\n        inputStream: {\r\n          type: \"LiveStream\",\r\n          constraints: {\r\n            width: 640,\r\n            height: 480,\r\n            facingMode: \"environment\" // or user\r\n          }\r\n        },\r\n        locator: {\r\n          patchSize: \"medium\",\r\n          halfSample: true\r\n        },\r\n        numOfWorkers: 2,\r\n        decoder: {\r\n          readers: [\"ean_reader\"],\r\n          debug: {\r\n            drawBoundingBox: true,\r\n            showFrequency: false,\r\n            drawScanline: true,\r\n            showPattern: false\r\n          }\r\n        },\r\n        locate: true\r\n      },\r\n      function(err) {\r\n        if (err) {\r\n          return console.error(err);\r\n        }\r\n        console.log(\"Initialization finished. Ready to start\");\r\n        Quagga.start();\r\n      }\r\n    );\r\n    Quagga.onDetected(this.onDetected);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    Quagga.offDetected(this.onDetected);\r\n  }\r\n\r\n  onDetected = result => {\r\n    console.log(\"FOUND\", result);\r\n    let code = result.codeResult.code;\r\n    this.setState({ results: [...this.state.results, code] });\r\n\r\n    if (this.state.results.length > 10) {\r\n      this.props.onDetected(this.state.results);\r\n    }\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Result extends React.Component {\r\n  render() {\r\n    const result = this.props.result;\r\n\r\n    if (!result) {\r\n      return null;\r\n    }\r\n    return <pre>{JSON.stringify(result, null, \"\\t\")}</pre>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Scanner from \"./Scanner\";\nimport Result from \"./Result\";\n\nimport \"./styles.css\";\n\nclass Start extends React.Component {\n  state = {\n    scanning: false,\n    results: null\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.toggleScan}>\n          {this.state.scanning ? \"Back\" : \"New scan\"}\n        </button>\n        {this.state.scanning ? (\n          <Scanner onDetected={this.onDetected} />\n        ) : (\n          <Result result={this.state.result} />\n        )}\n      </div>\n    );\n  }\n\n  toggleScan = () => {\n    this.setState({ scanning: !this.state.scanning });\n  };\n\n  onDetected = result => {\n    console.log(result);\n    this.setState({ result, scanning: false });\n  };\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Start />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}